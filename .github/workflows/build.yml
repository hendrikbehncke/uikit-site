name: Build

on:
  push:
    branches:
      - main
    tags:
      - "*"

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.generate.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Generate matrix
        id: generate
        uses: docker/bake-action/subaction/matrix@v6
        with:
          target: site
          fields: platforms

  build:
    runs-on: ${{ startsWith(matrix.platforms, 'linux/arm') && 'ubuntu-24.04-arm' || 'ubuntu-latest' }}
    needs:
      - prepare
    strategy:
      matrix:
        include: ${{ fromJson(needs.prepare.outputs.matrix) }}
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      # - name: Checkout repository
      #   uses: actions/checkout@v5

      # - name: Prepare
      #   run: |
      #     platform=${{ matrix.run.platform }}
      #     echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/bake-action@v6
        with:
          source: .
          push: true
          set: |
            *.tags=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

      # - name: Build and push by digest
      #   id: build
      #   uses: docker/build-push-action@v6
      #   with:
      #     platforms: ${{ matrix.run.platform }}
      #     labels: ${{ steps.meta.outputs.labels }}
      #     tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      #     provenance: false # Disable provenance to avoid unknown/unknown
      #     sbom: false # Disable sbom to avoid unknown/unknown
      #     outputs: type=image,push-by-digest=true,name-canonical=true,push=true

      # - name: Export digest
      #   run: |
      #     mkdir -p ${{ runner.temp }}/digests
      #     digest="${{ steps.build.outputs.digest }}"
      #     touch "${{ runner.temp }}/digests/${digest#sha256:}"

      # - name: Upload digest
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: digests-${{ env.PLATFORM_PAIR }}
      #     path: ${{ runner.temp }}/digests/*
      #     if-no-files-found: error
      #     retention-days: 1

  # merge:
  #   runs-on: ubuntu-latest
  #   needs:
  #     - build
  #   steps:
  #     - name: Download digests
  #       uses: actions/download-artifact@v4
  #       with:
  #         path: ${{ runner.temp }}/digests
  #         pattern: digests-*
  #         merge-multiple: true

  #     - name: Login to GitHub Container Registry
  #       uses: docker/login-action@v3
  #       with:
  #         registry: ${{ env.REGISTRY }}
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     - name: Docker meta
  #       id: meta
  #       uses: docker/metadata-action@v5
  #       with:
  #         images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
  #         tags: |
  #           type=ref,event=branch
  #           type=semver,pattern={{version}}

  #     - name: Create manifest list and push
  #       working-directory: ${{ runner.temp }}/digests
  #       run: |
  #         docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
  #           $(printf '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@sha256:%s ' *)

  #     - name: Inspect image
  #       run: |
  #         docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
